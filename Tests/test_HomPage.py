# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC


class TestHomePage():
  #for each of these tests, it's check if the button is move to the correct place by checking the url adress
  
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    #self.driver=webdriver.Edge()

    self.driver.get("http://localhost:3000/")
    self.driver.set_window_size(1920, 996)
    self.driver.find_element(By.ID, "username").send_keys("Heath93")
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "[data-test=\"signin-submit\"]").click()
    time.sleep(3)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
    
  """
  Verify that transaction amounts are displayed with the correct color:
  - Negative amounts should be red.
  - Positive amounts should be green.
  """
  def test_transaction_Negitive_amount_colors(self):
    WebDriverWait(self.driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "TransactionAmount-amountNegative")))

    # Verify negative amount color
    negative_amounts = self.driver.find_elements(By.CLASS_NAME, "TransactionAmount-amountNegative")
    for amount in negative_amounts:
        color = amount.value_of_css_property("color")
        # Allow both 'rgb' and 'rgba' formats
        assert color in ["rgb(255, 0, 0)", "rgba(255, 0, 0, 1)"], f"Expected red color, but got {color}."


  
  def test_transaction_Positive_amount_colors(self):
    # Wait for the positive transactions to load
    WebDriverWait(self.driver, 10).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "TransactionAmount-amountPositive")))

    # Verify positive amount color
    positive_amounts = self.driver.find_elements(By.CLASS_NAME, "TransactionAmount-amountPositive")
    for amount in positive_amounts:
        color = amount.value_of_css_property("color")
        # Update to match the actual CSS color value
        assert color in ["rgb(76, 175, 80)", "rgba(76, 175, 80, 1)"], f"Expected green color, but got {color}."

    print("Test Passed: All positive amounts have correct colors.")
  
  
  
  def test_homePageAmountSorted(self):
    self.driver.find_element(By.CSS_SELECTOR, ".MuiGrid-root:nth-child(2) .MuiChip-label").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-amount-range-slider\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-amount-range-slider\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-amount-range-slider\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    self.driver.find_element(By.CSS_SELECTOR, ".MuiBackdrop-root").click()
    time.sleep(3)
    self.driver.execute_script("window.scrollTo(0,0)")

    # Fetch all the transaction amounts displayed
    amounts_elements = self.driver.find_elements(By.CSS_SELECTOR, ".MuiGrid-root span[data-test=\"transaction-amount\"]")
    amounts = []

    for amount_element in amounts_elements:
        # Extract and clean the amount text (remove "$" and convert to float)
        amount_text = amount_element.text.replace("$", "").replace(",", "").strip()
        if amount_text.startswith("-"):
            amount = -float(amount_text[1:])  # Handle negative amounts
        else:
            amount = float(amount_text)
        amounts.append(amount)

    # Define the selected range (hardcoded for now, but should ideally match the range set in the slider)
    selected_range = (0, 1000)  # Example: range from $0 to $1,000

    # Check if all amounts fall within the selected range
    for amount in amounts:
        assert selected_range[0] <= abs(amount) <= selected_range[1], f"Amount {amount} is outside the range {selected_range}"

    print("All amounts are within the selected range.")

 

  
  
  
  
  def test_homePageTransactionDetail(self):
    self.driver.get("http://localhost:3000/")
    self.driver.set_window_size(1920, 996)
    time.sleep(3)
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(1) > .MuiListItem-root > .MuiPaper-root > .MuiGrid-root > .MuiGrid-root > .MuiGrid-root > .MuiGrid-root > .MuiGrid-root").click()
    time.sleep(3)
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-detail-header\"]").text == "Transaction Detail"
  
  
  
  
  
  #at the comment test check some time it's fail becuse the page return the test in low litters   
    
  def test_homePageAddingComment(self):
    # Navigate to the homepage and set the window size
    self.driver.get("http://localhost:3000/")
    self.driver.set_window_size(1920, 996)

    # Wait for and click the transaction sender button
    transaction_button = WebDriverWait(self.driver, 20).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "*[data-test=\"transaction-sender-Ec6hHyL6SC2F\"]"))
    )
    transaction_button.click()

    # Wait for the comment input field and enter the comment
    comment_input = WebDriverWait(self.driver, 20).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "*[data-test=\"transaction-comment-input-Ec6hHyL6SC2F\"]"))
    )
    comment_to_add = "Test Comment Update"
    comment_input.click()
    comment_input.send_keys(comment_to_add)
    comment_input.send_keys(Keys.ENTER)

    # Wait for the comments list to update by targeting the specific element
    comments_list = WebDriverWait(self.driver, 20).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "ul[data-test=\"comments-list\"]"))
    )

    # Validate the newly added comment appears in the comments list
    comments = comments_list.find_elements(By.CSS_SELECTOR, "li[data-test^='comment-list-item']")
    comment_texts = [comment.find_element(By.CSS_SELECTOR, "span").text for comment in comments]
    print(f"Debug: All comment texts found: {comment_texts}")

    # Assert the new comment is present
    assert comment_to_add in comment_texts, f"Expected '{comment_to_add}' in comments but found {comment_texts}"


   # def test_homePageDateReset(self):
  
  
  #   # Step 1: Open the filter date range modal
  #   self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"nav-contacts-tab\"]").click()
  #   self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-date-range-button\"]").click()
    
  #   # Step 2: Select a date range (start and end date)
  #   # Example: Picking today's date as both start and end
  #   self.driver.find_element(By.CSS_SELECTOR, ".Cal__Day__today").click()  # Start date
  #   self.driver.find_element(By.CSS_SELECTOR, ".Cal__Day__today").click()  # End date

  #   # Step 3: Confirm the filter (assuming there is a confirmation button)
  #   self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-apply-button\"]").click()

  #   # Step 4: Assert that transactions are displayed within the selected date range
  #   transactions = self.driver.find_elements(By.CSS_SELECTOR, "*[data-test=\"transaction-list-item-date\"]")
  #   for transaction in transactions:
  #       transaction_date = transaction.text  # Extract the date text
  #       # You can use datetime.strptime to parse and compare dates if needed
  #       print(f"Transaction Date: {transaction_date}")
  #   time.sleep(3)
  #   # Step 5: Click the "X" button to reset the date filter
  #   self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"transaction-list-filter-reset-button\"]").click()
  #   time.sleep(3)
  #   # Step 6: Assert that all transactions are displayed (reset functionality)
  #   all_transactions = self.driver.find_elements(By.CSS_SELECTOR, "*[data-test=\"transaction-list-item\"]")
  #   print(f"Total Transactions After Reset: {len(all_transactions)}")