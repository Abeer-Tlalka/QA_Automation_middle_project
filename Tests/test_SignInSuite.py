# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

class TestSignIpSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    #self.driver=webdriver.Edge()

    self.driver.get("http://localhost:3000/signin/signin")
    self.driver.set_window_size(1280, 664)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_SingInWithWrongPassword(self):
    self.driver.find_element(By.ID, "username").send_keys("keviqive")
    self.driver.find_element(By.ID, "password").send_keys("Pa$$w0rd!")
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiAlert-message").text == "Password is worng , please try again"
  
  def test_SignInWithAccountDoesNotExist(self):
    element = self.driver.find_element(By.ID, "username")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.ID, "username").send_keys("abeer")
    self.driver.find_element(By.ID, "password").send_keys("12345")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]").click()
    # Assert the error message is displayed
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiAlert-message").text == "Account does not exist"
    '''
    element = self.driver.find_element(By.ID, "username")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.ID, "username").send_keys("abeer")
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").click()
    element = self.driver.find_element(By.ID, "password")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.ID, "password").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "password").send_keys("12345")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]").click()
    self.driver.find_element(By.ID, "username").send_keys("keviqive")
    self.driver.find_element(By.ID, "password").send_keys("Pa$$w0rd!")
    assert self.driver.find_element(By.CSS_SELECTOR, ".MuiAlert-message").text == "Account dose not exist"
  
  
    
    '''
  
  
  def test_SignInWithAnEmptyinput(self):
    self.driver.find_element(By.ID, "username").send_keys("")
    self.driver.find_element(By.ID, "password").send_keys("")
    # Click somewhere outside the input fields to ensure that any validations or form checks happen
    self.driver.find_element(By.CSS_SELECTOR, ".App-root").click()
    self.driver.find_element(By.CSS_SELECTOR, ".SignInForm-form").click()
    # Locate the login button
    login_button = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]")
    # Check if the login button is disabled
    assert login_button.get_attribute("disabled") is not None, "The login button is not disabled when both fields are empty!"
  
  
  
  
  def test_SignIncorrectly(self):
    self.driver.find_element(By.ID, "username").send_keys("Heath93")
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]").click()
    
    # Wait for the URL to change to the home page
    WebDriverWait(self.driver, 10).until(
        EC.url_to_be("http://localhost:3000/")
    )
    # Assert the URL has changed correctly
    assert self.driver.current_url == "http://localhost:3000/"
    '''
    self.driver.find_element(By.CSS_SELECTOR, ".SignInForm-form").click()
    self.driver.find_element(By.ID, "password").click()
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signin-submit\"]").click()
    '''
