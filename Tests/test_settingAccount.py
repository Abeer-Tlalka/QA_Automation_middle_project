# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
class TestSettingAccount():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    #self.driver=webdriver.Edge()

    self.driver.get("http://localhost:3000/")
    self.driver.set_window_size(1920, 996)
    self.driver.find_element(By.ID, "username").send_keys("Heath93")
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "[data-test=\"signin-submit\"]").click()
    time.sleep(3)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_settingAccountEmptyEmail(self):
    # Step 1: Navigate to the "User Settings" page
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(2) .MuiTypography-root").click()

    # Step 2: Locate the email input field
    email_input = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"user-settings-email-input\"]")
    time.sleep(3)

    # Step 3: Use keyboard shortcuts to clear the input
    email_input.click()
    email_input.send_keys(Keys.CONTROL + "a")  # Select all text
    email_input.send_keys(Keys.BACKSPACE)  # Delete selected text
    time.sleep(3)

    # Step 4: Click outside the input field to trigger validation
    self.driver.find_element(By.CSS_SELECTOR, ".MuiGrid-root:nth-child(5) > .MuiGrid-root").click()

    # Step 5: Verify the validation error message
    error_message = self.driver.find_element(By.ID, "user-settings-email-input-helper-text").text
    assert error_message == "Enter an email address", f"Expected error message 'Enter an email address', but got '{error_message}'"


  
  def test_settingAccountEmptyPhone(self):
      # Step 1: Navigate to the "User Settings" page
      self.driver.find_element(By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(2) .MuiTypography-root").click()

      # Step 2: Locate the phone number input field
      phone_input = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"user-settings-phoneNumber-input\"]")
      time.sleep(3)

      # Step 3: Use keyboard shortcuts to clear the input
      phone_input.click()
      phone_input.send_keys(Keys.CONTROL + "a")  # Select all text
      phone_input.send_keys(Keys.BACKSPACE)  # Delete selected text
      time.sleep(3)

      # Step 4: Click outside the input field to trigger validation
      self.driver.find_element(By.CSS_SELECTOR, ".MuiGrid-root:nth-child(5) > .MuiGrid-root").click()

      # Step 5: Verify the validation error message
      error_message = self.driver.find_element(By.ID, "user-settings-phoneNumber-input-helper-text").text
      assert error_message == "Enter a phone number", f"Expected error message 'Enter a phone number', but got '{error_message}'"

  
  def test_settingAccountChangeFirstName(self):
    # Step 1: Navigate to the "User Settings" page
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(2) .MuiTypography-root").click()

    # Step 2: Locate the first name input field
    first_name_input = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"user-settings-firstName-input\"]")
    time.sleep(2)

    # Step 3: Change the first name
    first_name_input.click()
    first_name_input.send_keys(Keys.CONTROL + "a")  # Select all text
    first_name_input.send_keys(Keys.BACKSPACE)  # Delete selected text
    new_first_name = "NewName"  # Define a new first name
    first_name_input.send_keys(new_first_name)  # Enter the new name
    time.sleep(2)

    # Step 4: Wait until the "Save" button is clickable and click it
    save_button = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "*[data-test=\"user-settings-submit\"]"))
    )
    save_button.click()

    # Step 5: Verify if the first name has been updated successfully
    updated_first_name = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"user-settings-firstName-input\"]").get_attribute("value")
    assert updated_first_name == new_first_name, f"Expected first name to be '{new_first_name}', but got '{updated_first_name}'"
