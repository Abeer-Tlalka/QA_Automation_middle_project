# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC


class TestNotificationSuite():
  #for each of these tests, it's check if the button is move to the correct place by checking the url adress
  
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    #self.driver=webdriver.Edge()

    self.driver.get("http://localhost:3000/")
    self.driver.set_window_size(1920, 996)
    self.driver.find_element(By.ID, "username").send_keys("Arvilla_Hegmann")
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "[data-test=\"signin-submit\"]").click()
    time.sleep(3)
    self.driver.find_element(By.CSS_SELECTOR, ".MuiButtonBase-root:nth-child(4) .MuiTypography-root").click()
    WebDriverWait(self.driver, 10).until(
        EC.url_to_be("http://localhost:3000/notifications")
    )
    
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
    

  def teardown_method(self, method):
      self.driver.quit()



  def test_dismiss_notification_updates_count(self):
    # Get the initial notification count
    badge_element = self.driver.find_element(By.CSS_SELECTOR, '.MuiBadge-badge.NavBar-customBadge')
    initial_count = int(badge_element.text)  # Extract the text and convert it to an integer

    # Wait for the notifications list to be present
    notification_list = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, '[data-test="notifications-list"]'))
    )
    first_notification = notification_list.find_elements(By.TAG_NAME, "li")[0]

    # Locate the dismiss button using XPath (handles dynamic parts in the data-test attribute)
    dismiss_button = WebDriverWait(first_notification, 10).until(
        EC.element_to_be_clickable(
            (By.XPATH, ".//button[starts-with(@data-test, 'notification-mark-read')]")
        )
    )
    dismiss_button.click()

    # Wait for the badge count to update
    WebDriverWait(self.driver, 10).until(
        lambda driver: int(driver.find_element(By.CSS_SELECTOR, '.MuiBadge-badge.NavBar-customBadge').text) == initial_count - 1
    )

    # Get the updated notification count
    updated_count = int(self.driver.find_element(By.CSS_SELECTOR, '.MuiBadge-badge.NavBar-customBadge').text)

    # Assert that the notification count has decreased by 1
    assert updated_count == initial_count - 1, (
        f"Notification count did not decrease correctly. "
        f"Initial: {initial_count}, Updated: {updated_count}"
    )