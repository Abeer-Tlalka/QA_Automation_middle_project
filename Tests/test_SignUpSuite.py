# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

from selenium.webdriver.support import expected_conditions as EC

class TestSignupSuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    #self.driver=webdriver.Edge()

    self.driver.get("http://localhost:3000/signup")
    self.driver.set_window_size(1280, 664)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_signUpwithPasswordsdoesnotmatch(self):
     
    # Fill in the required fields
    self.driver.find_element(By.ID, "firstName").send_keys("abeer")
    self.driver.find_element(By.ID, "lastName").send_keys("mosa")
    self.driver.find_element(By.ID, "username").send_keys("abeermosa")
    
    # Enter mismatching passwords
    self.driver.find_element(By.ID, "password").send_keys("1234")
    self.driver.find_element(By.ID, "confirmPassword").send_keys("1345")
    
    # Click somewhere outside the input fields to trigger form validation
    self.driver.find_element(By.CSS_SELECTOR, ".SignUpForm-form").click()
    
    # Locate the signup button
    signup_button = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signup-submit\"]")
    
    # Assert that the signup button remains disabled when passwords do not match
    assert signup_button.get_attribute("disabled") is not None, "Signup button is enabled despite mismatched passwords!"
    
    # Print success message for clarity
    print("Test passed: Signup button is disabled when passwords do not match.")
  
  def test_SignupWithUserNameAlreadyToken(self):
    '''
    self.driver.find_element(By.ID, "username").send_keys("Heath93")
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.ID, "firstName").click()
    self.driver.find_element(By.ID, "firstName").send_keys("Ted")
    self.driver.find_element(By.ID, "lastName").click()
    self.driver.find_element(By.ID, "lastName").send_keys("Parisian")
    self.driver.find_element(By.ID, "confirmPassword").click()
    self.driver.find_element(By.ID, "confirmPassword").send_keys("s3cret")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signup-submit\"]").click()
    '''
     #Fill the username field with an existing username
    self.driver.find_element(By.ID, "username").send_keys("Heath93")
    
    # Fill the password and confirm password fields
    self.driver.find_element(By.ID, "password").send_keys("s3cret")
    self.driver.find_element(By.ID, "confirmPassword").send_keys("s3cret")
    
    # Fill in first name and last name fields
    self.driver.find_element(By.ID, "firstName").send_keys("Ted")
    self.driver.find_element(By.ID, "lastName").send_keys("Parisian")
    
    # Click the signup button
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signup-submit\"]").click()
    
    # Add a small wait to allow the page to react (adjust the wait as needed for your site)
    WebDriverWait(self.driver, 5).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".MuiAlert-message"))
    )
    
    # Check if the page URL has changed (indicating a navigation occurred)
    current_url = self.driver.current_url
    assert current_url == "http://localhost:3000/signup", (
        "Test failed: Website navigated to a new page when it should have stayed on the signup page."
    )
    
    # Verify the alert message appears for duplicate usernames
    alert_message = self.driver.find_element(By.CSS_SELECTOR, ".MuiAlert-message").text
    assert alert_message == "This username is already taken, please try again", (
        f"Test failed: Unexpected alert message: '{alert_message}'"
    )
    
    # Print success message
    print("Test passed: Signup blocked for an already taken username with proper alert message.")
    
  
  def test_SignUpWithEmptyRequiredfile(self):
    self.driver.find_element(By.ID, "firstName").send_keys("abeer ")
    self.driver.find_element(By.ID, "lastName").send_keys("mosa")
    self.driver.find_element(By.ID, "username").send_keys("")
    self.driver.find_element(By.ID, "password").send_keys("123123")
    self.driver.find_element(By.ID, "confirmPassword").send_keys("123123")
    self.driver.find_element(By.CSS_SELECTOR, ".SignUpForm-form").click()
    # Locate the signup button
    signup_button = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signup-submit\"]")
    
    # Check if the signup button is disabled
    assert signup_button.get_attribute("disabled") is not None, (
        "Test failed: Signup button is enabled despite empty required fields."
    )
    
    # Print success message
    print("Test passed: Signup button is correctly disabled when required fields are empty.")
  
  def test_SignUpCorrectlyAndTheDataSavedOnTheBackend(self):
    # Step 1: Fill out the signup form with valid data
    self.driver.find_element(By.ID, "firstName").send_keys("Scott")
    self.driver.find_element(By.ID, "lastName").send_keys("Leo")
    self.driver.find_element(By.ID, "username").send_keys("ScottLeo")
    self.driver.find_element(By.ID, "password").send_keys("123123")
    self.driver.find_element(By.ID, "confirmPassword").send_keys("123123")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"signup-submit\"]").click()

    # Step 2: Wait for the sign-up process to complete and page to navigate to the signin page
    WebDriverWait(self.driver, 10).until(EC.url_contains("/signin"))

    # Step 3: Log in with the same username and password
    self.driver.find_element(By.ID, "username").send_keys("ScottLeo")
    self.driver.find_element(By.ID, "password").send_keys("123123")
    self.driver.find_element(By.CSS_SELECTOR, "[data-test=\"signin-submit\"]").click()

    # Step 4: Wait for the page to navigate to the homepage
    # WebDriverWait(self.driver, 15).until(EC.url_to_be("http://localhost:3000"))
    time.sleep(3)
    assert self.driver.current_url == "http://localhost:3000/", "The page did not navigate to the homepage"
    

    # Step 5: Check if the <h2> element with the "Get Started with Real World App" text appears on the homepage
    homepage_element = WebDriverWait(self.driver, 10).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "h2[data-test=\"user-onboarding-dialog-title\"]"))
    )

    # Assert that the text content of the h2 element matches the expected text
    # self.assertEqual(homepage_element.text, "Get Started with Real World App", "The correct text did not appear on the homepage.")
